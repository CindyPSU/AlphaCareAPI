Christopher John Morris
M03-A04 Implemented Design Patterns

The Master-Detail, as seen in the demonstration video, has a list of patients on the left and the selected patient’s details on the right. When a patient is selected, his or her details are populated into the detail pane on the right. While the full user experience may not be ideal, i.e., the save button showing at all times even if there is nothing to save, the UI does portray the UI pattern. The Master detail pattern lies in PatientMasterListDetailFXMLController, which is the parent of PatientListXMLController and PatientDetailFXMLController and delegates the interactions between the controllers. For instance, PatientMasterListDetailFXMLController is where the list’s selection is handed off and populates the detail screen with the patient’s information.

The Strategy Design Pattern is the PatientDetailFXMLControllerDataFieldPopulator interface. This is used to populate the detail screen during initialization. When the detail screen is loaded from the Master-Detail flow, the concrete type, PatientDetailFXMLControllerDataFieldPopulatorEdit, populates the data fields with the selected patient. When the detail screen is loaded from the Create Patient flow, the concrete type, PatientDetailFXMLControllerDataFieldPopulatorCreate, simply does nothing. It could be an opportunity to populate data fields using information the application has gathered in other contexts but for now, it is more or less a placeholder. 

Another implementation of the Strategy Pattern is the PatientLoader. PatientListXMLController uses the PatientLoader interface to load a list of patients. Since PatientListXMLController does not need to know the details of how patients are loaded, the details are hidden behind the interface. For now, the patients are loaded from the concrete type PatientLoaderStub. In the future, the patients will be loaded from persistence, making it easy to swap out the functionality without making changes to PatientListXMLController. 